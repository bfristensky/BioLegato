/* Generated By:JJTree&JavaCC: Do not edit this line. PCDTokenManager.java */
package org.biopcd.parser ;
import java.awt.image.BufferedImage ;
import java.io.File                 ;
import java.io.Reader               ;
import java.io.FileReader           ;
import java.io.FileInputStream      ;
import java.io.IOException          ;
import java.io.InputStreamReader    ;
import java.io.BufferedReader       ;
import java.sql.Connection          ;
import java.sql.DriverManager       ;
import java.util.Set                ;
import java.util.Map                ;
import java.util.List               ;
import java.util.HashSet            ;
import java.util.HashMap            ;
import java.util.ArrayList          ;
import java.util.Collection         ;
import java.util.Collections        ;
import java.util.LinkedList         ;
import java.util.LinkedHashMap      ;
import java.util.regex.Matcher      ;
import java.util.regex.Pattern      ;
import javax.swing.Action           ;
import javax.swing.BoxLayout        ;
import javax.swing.JButton          ;
import javax.swing.JFrame           ;
import javax.swing.JMenu            ;
import javax.swing.JList            ;
import javax.swing.JPanel           ;
import javax.swing.JSlider          ;
import javax.swing.JTabbedPane      ;
import javax.swing.JTextField       ;
import javax.swing.JMenuItem        ;
import javax.swing.ImageIcon        ;
import javax.imageio.ImageIO        ;
import org.biopcd.sql.*             ;
import org.biopcd.widgets.*         ;

/** Token Manager. */
public class PCDTokenManager implements PCDConstants
{
    /**
     * Stores the current indentation scope
     */
    private int indent = 0 ;

    /**
     * Used to store the size of an indent in spaces
     * This is necessary for calculations within the Java program
     */
    public  static final int INDENT_SIZE = 4 ;

    /**
     * Returns the current indentation level
     **
     * @return the current indentation level
     */
    public int getIndent() {
        return indent;
    }

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xdbc9adffbf59f1feL) != 0L || (active1 & 0x12dL) != 0L)
         {
            jjmatchedKind = 78;
            return 18;
         }
         if ((active0 & 0x10420000a00c00L) != 0L || (active1 & 0xc0L) != 0L)
         {
            jjmatchedKind = 78;
            return 32;
         }
         if ((active0 & 0x2002000000000000L) != 0L || (active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 78;
            return 8;
         }
         if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 78;
            return 41;
         }
         if ((active0 & 0x4100040000000L) != 0L || (active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 78;
            return 3;
         }
         return -1;
      case 1:
         if ((active0 & 0x40000000L) != 0L)
            return 2;
         if ((active0 & 0xc000000000000L) != 0L)
            return 18;
         if ((active0 & 0xfbf3ffffbff9f1feL) != 0L || (active1 & 0x1ffL) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 1;
            return 18;
         }
         if ((active0 & 0xc00L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 1;
            return 31;
         }
         return -1;
      case 2:
         if ((active0 & 0x400L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 78;
               jjmatchedPos = 2;
            }
            return 30;
         }
         if ((active0 & 0x202240d094c02020L) != 0L || (active1 & 0xf0L) != 0L)
            return 18;
         if ((active0 & 0xdbd1bf2f2b39d9deL) != 0L || (active1 & 0x10fL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 78;
               jjmatchedPos = 2;
            }
            return 18;
         }
         return -1;
      case 3:
         if ((active0 & 0x400L) != 0L)
         {
            jjmatchedKind = 9;
            jjmatchedPos = 3;
            return 35;
         }
         if ((active0 & 0x5ac1a93f2919591eL) != 0L || (active1 & 0x141L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 3;
            return 18;
         }
         if ((active0 & 0x81101600022080c0L) != 0L || (active1 & 0xeL) != 0L)
            return 18;
         return -1;
      case 4:
         if ((active0 & 0x5081a13a28014d1eL) != 0L || (active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 4;
            return 18;
         }
         if ((active0 & 0xa40080501181000L) != 0L || (active1 & 0x101L) != 0L)
            return 18;
         return -1;
      case 5:
         if ((active0 & 0x1000a02000000102L) != 0L || (active1 & 0x40L) != 0L)
            return 18;
         if ((active0 & 0x4081011a28014c1cL) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 5;
            return 18;
         }
         return -1;
      case 6:
         if ((active0 & 0x4000000a08014014L) != 0L)
            return 18;
         if ((active0 & 0x81011020000c08L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 6;
            return 18;
         }
         return -1;
      case 7:
         if ((active0 & 0x1011020000000L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 7;
            return 18;
         }
         if ((active0 & 0x80000000000c08L) != 0L)
            return 18;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 44:
         return jjStopAtPos(0, 73);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x2002000000000000L, 0x10L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x2L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x800f2040000cL, 0x0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x4080001000000030L, 0x0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x2003100040L, 0x0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_0(0xc000000L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x4100040000000L, 0x2L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa1_0(0x100000000000000L, 0x0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x800000000001080L, 0x1L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x20000c000000000L, 0x4L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x100L, 0x8L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x8010080002000L, 0x0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x1000000000000000L, 0x100L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa1_0(0x40000000000000L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x10000000L, 0x0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x12c0000084000L, 0x0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x10420000a00c00L, 0xc0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0x8000L, 0x0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x10000L, 0x0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa1_0(0x20000000000000L, 0x0L);
      default :
         return jjMoveNfa_0(4, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x80844011100000L, active1, 0x1e9L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000L, active1, 0x10L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000004000000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x4001000008000c10L, active1, 0x4L);
      case 70:
      case 102:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 50, 18);
         break;
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x10080300000004L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x4090000110e0L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000402000000L, active1, 0L);
      case 78:
      case 110:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(1, 30, 2);
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000008000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x820002820004008L, active1, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L, active1, 0L);
      case 82:
      case 114:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 51, 18);
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000200000L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0xc02000L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000080000102L, active1, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000L, active1, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000000L, active1, 0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x200220000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x2080000L, active1, 0L);
      case 66:
      case 98:
         if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000000L, active1, 0x41L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x10L, active1, 0L);
      case 68:
      case 100:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 49, 18);
         break;
      case 69:
      case 101:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(2, 26, 18);
         return jjMoveStringLiteralDfa3_0(active0, 0x8050090100000000L, active1, 0x2L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000000L, active1, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L, active1, 0L);
      case 76:
      case 108:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 61, 18);
         return jjMoveStringLiteralDfa3_0(active0, 0x1000020104040L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x908L, active1, 0x8L);
      case 78:
      case 110:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 39, 18);
         return jjMoveStringLiteralDfa3_0(active0, 0x800808011000L, active1, 0x104L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000100600000004L, active1, 0L);
      case 80:
      case 112:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 46, 18);
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000L, active1, 0L);
      case 82:
      case 114:
         if ((active0 & 0x20L) != 0L)
         {
            jjmatchedKind = 5;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 53, 18);
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(2, 69, 18);
         return jjMoveStringLiteralDfa3_0(active0, 0x3000000000L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x200200001000080L, active1, 0L);
      case 84:
      case 116:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(2, 31, 18);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(2, 68, 18);
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000002L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000L, active1, 0L);
      case 86:
      case 118:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(2, 22, 18);
         else if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(2, 23, 18);
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000L, active1, 0L);
      case 87:
      case 119:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(2, 28, 18);
         break;
      case 88:
      case 120:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(2, 13, 18);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 38, 18);
         return jjMoveStringLiteralDfa3_0(active0, 0x400L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x4080000000004000L, active1, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000108L, active1, 0L);
      case 67:
      case 99:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 56, 18);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 63, 18);
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000L, active1, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L, active1, 0L);
      case 69:
      case 101:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(3, 6, 18);
         else if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 21, 18);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 41, 18);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 42, 18);
         else if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(3, 67, 18);
         return jjMoveStringLiteralDfa4_0(active0, 0x1001000000000L, active1, 0x101L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000200000010L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000L, active1, 0L);
      case 77:
      case 109:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(3, 65, 18);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000002000000000L, active1, 0L);
      case 78:
      case 110:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 44, 18);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 52, 18);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000004L, active1, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x800L, active1, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x40010000080000L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x400100000L, active1, 0x40L);
      case 84:
      case 116:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(3, 7, 18);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 25, 18);
         return jjMoveStringLiteralDfa4_0(active0, 0x200801000402L, active1, 0L);
      case 85:
      case 117:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(3, 66, 18);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000L, active1, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000L, active1, 0L);
      case 88:
      case 120:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 15, 18);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(4, 24, 18);
         return jjMoveStringLiteralDfa5_0(active0, 0x802008000400L, active1, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000000L, active1, 0L);
      case 67:
      case 99:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(4, 19, 18);
         return jjMoveStringLiteralDfa5_0(active0, 0x1001200000000L, active1, 0L);
      case 69:
      case 101:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 20, 18);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(4, 34, 18);
         return jjMoveStringLiteralDfa5_0(active0, 0x200800000100L, active1, 0x40L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0x800L, active1, 0L);
      case 75:
      case 107:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 32, 18);
         break;
      case 76:
      case 108:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 43, 18);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 57, 18);
         else if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(4, 64, 18);
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(4, 72, 18);
         break;
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x10L, active1, 0L);
      case 78:
      case 110:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 59, 18);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000aL, active1, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000000000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x20004000L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x4L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000000L, active1, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000L, active1, 0L);
      case 88:
      case 120:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(4, 12, 18);
         break;
      case 89:
      case 121:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 54, 18);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000010L, active1, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0x8L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000004L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x4800L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000000L, active1, 0L);
      case 77:
      case 109:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 45, 18);
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000L, active1, 0L);
      case 78:
      case 110:
         if ((active0 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(5, 1, 18);
         return jjMoveStringLiteralDfa6_0(active0, 0x808000000L, active1, 0L);
      case 82:
      case 114:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(5, 8, 18);
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000400L, active1, 0L);
      case 83:
      case 115:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 47, 18);
         break;
      case 84:
      case 116:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 37, 18);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 60, 18);
         else if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(5, 70, 18);
         return jjMoveStringLiteralDfa6_0(active0, 0x1001000000000L, active1, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x400L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x1011000000000L);
      case 75:
      case 107:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(6, 27, 18);
         break;
      case 76:
      case 108:
         if ((active0 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(6, 4, 18);
         return jjMoveStringLiteralDfa7_0(active0, 0x800L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x8L);
      case 82:
      case 114:
         if ((active0 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(6, 2, 18);
         break;
      case 83:
      case 115:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(6, 14, 18);
         else if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(6, 16, 18);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(6, 33, 18);
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000000000L);
      case 84:
      case 116:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(6, 35, 18);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 62, 18);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(7, 10, 18);
         break;
      case 69:
      case 101:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(7, 11, 18);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 55, 18);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x1001000000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000000L);
      case 88:
      case 120:
         if ((active0 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(7, 3, 18);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 40, 18);
         break;
      case 75:
      case 107:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(8, 29, 18);
         break;
      case 78:
      case 110:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 36, 18);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 48, 18);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 78;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 8:
               case 18:
                  if ((0x3ff400000000000L & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  jjCheckNAdd(18);
                  break;
               case 35:
                  if ((0x3ff400000000000L & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  jjCheckNAdd(18);
                  break;
               case 2:
                  if ((0x3ff400000000000L & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  jjCheckNAdd(18);
                  break;
               case 32:
                  if ((0x3ff400000000000L & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  jjCheckNAdd(18);
                  break;
               case 31:
                  if ((0x3ff400000000000L & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  jjCheckNAdd(18);
                  break;
               case 30:
                  if ((0x3ff400000000000L & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  jjCheckNAdd(18);
                  break;
               case 3:
                  if ((0x3ff400000000000L & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  jjCheckNAdd(18);
                  break;
               case 41:
                  if ((0x3ff400000000000L & l) != 0L)
                  {
                     if (kind > 78)
                        kind = 78;
                     jjCheckNAdd(18);
                  }
                  if (curChar == 56)
                     jjstateSet[jjnewStateCnt++] = 44;
                  if (curChar == 56)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 75)
                        kind = 75;
                     jjCheckNAddStates(0, 4);
                  }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 82)
                        kind = 82;
                  }
                  else if (curChar == 32)
                  {
                     if (kind > 86)
                        kind = 86;
                     jjAddStates(5, 6);
                  }
                  else if (curChar == 35)
                     jjCheckNAddTwoStates(66, 67);
                  else if (curChar == 36)
                     jjAddStates(7, 11);
                  else if (curChar == 45)
                     jjCheckNAddStates(12, 15);
                  else if (curChar == 9)
                  {
                     if (kind > 84)
                        kind = 84;
                  }
                  else if (curChar == 46)
                     jjCheckNAdd(16);
                  else if (curChar == 34)
                     jjCheckNAddStates(16, 18);
                  if (curChar == 13)
                     jjAddStates(19, 20);
                  break;
               case 5:
                  if (curChar == 52 && kind > 18)
                     kind = 18;
                  break;
               case 6:
               case 42:
                  if (curChar == 54)
                     jjCheckNAdd(5);
                  break;
               case 10:
               case 12:
                  if (curChar == 34)
                     jjCheckNAddStates(16, 18);
                  break;
               case 11:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(16, 18);
                  break;
               case 13:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 34 && kind > 74)
                     kind = 74;
                  break;
               case 15:
                  if (curChar == 46)
                     jjCheckNAdd(16);
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAdd(16);
                  break;
               case 19:
                  if (curChar == 9 && kind > 84)
                     kind = 84;
                  break;
               case 40:
                  if (curChar == 54 && kind > 17)
                     kind = 17;
                  break;
               case 44:
                  if (curChar == 54)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 45:
                  if (curChar == 56)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 46:
                  if (curChar == 45)
                     jjCheckNAddStates(12, 15);
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 75)
                     kind = 75;
                  jjCheckNAdd(47);
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(48, 49);
                  break;
               case 49:
                  if (curChar == 46)
                     jjCheckNAdd(50);
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAdd(50);
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(51, 52);
                  break;
               case 52:
                  if (curChar == 46 && kind > 76)
                     kind = 76;
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 75)
                     kind = 75;
                  jjCheckNAddStates(0, 4);
                  break;
               case 54:
                  if (curChar == 36)
                     jjAddStates(7, 11);
                  break;
               case 56:
                  if ((0x3ff400000000000L & l) == 0L)
                     break;
                  if (kind > 75)
                     kind = 75;
                  jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 58:
                  if ((0x3ff400000000000L & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 60:
                  if ((0x3ff400000000000L & l) != 0L)
                     jjCheckNAddTwoStates(60, 49);
                  break;
               case 62:
                  if ((0x3ff400000000000L & l) != 0L)
                     jjCheckNAddTwoStates(62, 52);
                  break;
               case 64:
                  if ((0x3ff400000000000L & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 65:
                  if (curChar == 35)
                     jjCheckNAddTwoStates(66, 67);
                  break;
               case 66:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 80)
                     kind = 80;
                  jjCheckNAdd(66);
                  break;
               case 67:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 83)
                     kind = 83;
                  jjCheckNAdd(67);
                  break;
               case 68:
                  if (curChar == 13)
                     jjAddStates(19, 20);
                  break;
               case 69:
                  if (curChar == 10 && kind > 82)
                     kind = 82;
                  break;
               case 70:
                  if (curChar == 10 && kind > 92)
                     kind = 92;
                  break;
               case 71:
                  if ((0x2400L & l) != 0L && kind > 82)
                     kind = 82;
                  break;
               case 72:
                  if (curChar != 32)
                     break;
                  if (kind > 86)
                     kind = 86;
                  jjAddStates(5, 6);
                  break;
               case 73:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 74:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 75:
                  if (curChar == 32 && kind > 85)
                     kind = 85;
                  break;
               case 76:
                  if (curChar != 32)
                     break;
                  if (kind > 86)
                     kind = 86;
                  jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 77:
                  if (curChar == 32 && kind > 86)
                     kind = 86;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 8:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 78)
                        kind = 78;
                     jjCheckNAdd(18);
                  }
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 35:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 78)
                        kind = 78;
                     jjCheckNAdd(18);
                  }
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 2:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 78)
                        kind = 78;
                     jjCheckNAdd(18);
                  }
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 32:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 78)
                        kind = 78;
                     jjCheckNAdd(18);
                  }
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 37;
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 31:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 78)
                        kind = 78;
                     jjCheckNAdd(18);
                  }
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 36;
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 30:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 78)
                        kind = 78;
                     jjCheckNAdd(18);
                  }
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 35;
                  if ((0x10000000100000L & l) != 0L)
                  {
                     if (kind > 9)
                        kind = 9;
                  }
                  break;
               case 3:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 78)
                        kind = 78;
                     jjCheckNAdd(18);
                  }
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 41:
               case 18:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  jjCheckNAdd(18);
                  break;
               case 4:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 78)
                        kind = 78;
                     jjCheckNAdd(18);
                  }
                  if ((0x100000001000000L & l) != 0L)
                     jjAddStates(21, 22);
                  else if ((0x10000000100000L & l) != 0L)
                     jjAddStates(23, 24);
                  else if ((0x10000000100L & l) != 0L)
                     jjAddStates(25, 26);
                  else if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 8;
                  else if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 0:
                  if ((0x100000001000L & l) != 0L && kind > 17)
                     kind = 17;
                  break;
               case 1:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 7:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 9:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 11:
                  jjAddStates(16, 18);
                  break;
               case 17:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  jjCheckNAdd(18);
                  break;
               case 20:
                  if ((0x10000000100L & l) != 0L)
                     jjAddStates(25, 26);
                  break;
               case 21:
                  if ((0x100000001000L & l) != 0L && kind > 58)
                     kind = 58;
                  break;
               case 22:
                  if ((0x2000000020000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if ((0x400000004L & l) != 0L && kind > 58)
                     kind = 58;
                  break;
               case 25:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if ((0x2000000020000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if ((0x10000000100000L & l) != 0L)
                     jjAddStates(23, 24);
                  break;
               case 33:
                  if ((0x100000001000000L & l) != 0L && kind > 9)
                     kind = 9;
                  break;
               case 34:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 36:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if ((0x100000001000000L & l) != 0L)
                     jjAddStates(21, 22);
                  break;
               case 43:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 55:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 75)
                     kind = 75;
                  jjCheckNAdd(56);
                  break;
               case 56:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 75)
                     kind = 75;
                  jjCheckNAdd(56);
                  break;
               case 57:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAdd(58);
                  break;
               case 58:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAdd(58);
                  break;
               case 59:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(60, 49);
                  break;
               case 60:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(60, 49);
                  break;
               case 61:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(62, 52);
                  break;
               case 62:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(62, 52);
                  break;
               case 63:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  jjCheckNAdd(64);
                  break;
               case 64:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  jjCheckNAdd(64);
                  break;
               case 66:
                  if (kind > 80)
                     kind = 80;
                  jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 67:
                  if (kind > 83)
                     kind = 83;
                  jjstateSet[jjnewStateCnt++] = 67;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 11:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(16, 18);
                  break;
               case 66:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 80)
                     kind = 80;
                  jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 67:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 83)
                     kind = 83;
                  jjstateSet[jjnewStateCnt++] = 67;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 78 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_1(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xdbc9adffbf59f1feL) != 0L || (active1 & 0x12dL) != 0L)
         {
            jjmatchedKind = 78;
            return 18;
         }
         if ((active0 & 0x10420000a00c00L) != 0L || (active1 & 0xc0L) != 0L)
         {
            jjmatchedKind = 78;
            return 32;
         }
         if ((active0 & 0x2002000000000000L) != 0L || (active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 78;
            return 8;
         }
         if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 78;
            return 41;
         }
         if ((active0 & 0x4100040000000L) != 0L || (active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 78;
            return 3;
         }
         return -1;
      case 1:
         if ((active0 & 0x40000000L) != 0L)
            return 2;
         if ((active0 & 0xc000000000000L) != 0L)
            return 18;
         if ((active0 & 0xfbf3ffffbff9f1feL) != 0L || (active1 & 0x1ffL) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 1;
            return 18;
         }
         if ((active0 & 0xc00L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 1;
            return 31;
         }
         return -1;
      case 2:
         if ((active0 & 0x400L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 78;
               jjmatchedPos = 2;
            }
            return 30;
         }
         if ((active0 & 0x202240d094c02020L) != 0L || (active1 & 0xf0L) != 0L)
            return 18;
         if ((active0 & 0xdbd1bf2f2b39d9deL) != 0L || (active1 & 0x10fL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 78;
               jjmatchedPos = 2;
            }
            return 18;
         }
         return -1;
      case 3:
         if ((active0 & 0x400L) != 0L)
         {
            jjmatchedKind = 9;
            jjmatchedPos = 3;
            return 35;
         }
         if ((active0 & 0x5ac1a93f2919591eL) != 0L || (active1 & 0x141L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 3;
            return 18;
         }
         if ((active0 & 0x81101600022080c0L) != 0L || (active1 & 0xeL) != 0L)
            return 18;
         return -1;
      case 4:
         if ((active0 & 0x5081a13a28014d1eL) != 0L || (active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 4;
            return 18;
         }
         if ((active0 & 0xa40080501181000L) != 0L || (active1 & 0x101L) != 0L)
            return 18;
         return -1;
      case 5:
         if ((active0 & 0x1000a02000000102L) != 0L || (active1 & 0x40L) != 0L)
            return 18;
         if ((active0 & 0x4081011a28014c1cL) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 5;
            return 18;
         }
         return -1;
      case 6:
         if ((active0 & 0x4000000a08014014L) != 0L)
            return 18;
         if ((active0 & 0x81011020000c08L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 6;
            return 18;
         }
         return -1;
      case 7:
         if ((active0 & 0x1011020000000L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 7;
            return 18;
         }
         if ((active0 & 0x80000000000c08L) != 0L)
            return 18;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0, long active1)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 44:
         return jjStopAtPos(0, 73);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_1(0x2002000000000000L, 0x10L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_1(0x2L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_1(0x800f2040000cL, 0x0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_1(0x4080001000000030L, 0x0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_1(0x8000000000000000L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_1(0x2003100040L, 0x0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_1(0xc000000L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_1(0x4100040000000L, 0x2L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa1_1(0x100000000000000L, 0x0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_1(0x800000000001080L, 0x1L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_1(0x20000c000000000L, 0x4L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_1(0x100L, 0x8L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_1(0x8010080002000L, 0x0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_1(0x1000000000000000L, 0x100L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa1_1(0x40000000000000L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_1(0x10000000L, 0x0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_1(0x12c0000084000L, 0x0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_1(0x10420000a00c00L, 0xc0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_1(0x8000L, 0x0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x20L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_1(0x10000L, 0x0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa1_1(0x20000000000000L, 0x0L);
      default :
         return jjMoveNfa_1(4, 0);
   }
}
private int jjMoveStringLiteralDfa1_1(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_1(active0, 0x80844011100000L, active1, 0x1e9L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_1(active0, 0x100000000000L, active1, 0x10L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa2_1(active0, 0x100000004000000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_1(active0, 0x4001000008000c10L, active1, 0x4L);
      case 70:
      case 102:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_1(1, 50, 18);
         break;
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_1(active0, 0x10080300000004L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_1(active0, 0x4090000110e0L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_1(active0, 0x2000000402000000L, active1, 0L);
      case 78:
      case 110:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_1(1, 30, 2);
         return jjMoveStringLiteralDfa2_1(active0, 0x2000000008000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa2_1(active0, 0x820002820004008L, active1, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_1(active0, 0x80000L, active1, 0L);
      case 82:
      case 114:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_1(1, 51, 18);
         return jjMoveStringLiteralDfa2_1(active0, 0x1000000000200000L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa2_1(active0, 0xc02000L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x2L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_1(active0, 0x40000080000102L, active1, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa2_1(active0, 0x10000000000L, active1, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_1(active0, 0x8000000000000000L, active1, 0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa2_1(active0, 0x200220000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_1(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_1(active0, 0x2080000L, active1, 0L);
      case 66:
      case 98:
         if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_1(active0, 0x100000000000000L, active1, 0x41L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa3_1(active0, 0x10L, active1, 0L);
      case 68:
      case 100:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_1(2, 49, 18);
         break;
      case 69:
      case 101:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_1(2, 26, 18);
         return jjMoveStringLiteralDfa3_1(active0, 0x8050090100000000L, active1, 0x2L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_1(active0, 0x4000000000000000L, active1, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa3_1(active0, 0x800000000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_1(active0, 0x8000L, active1, 0L);
      case 76:
      case 108:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_1(2, 61, 18);
         return jjMoveStringLiteralDfa3_1(active0, 0x1000020104040L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa3_1(active0, 0x908L, active1, 0x8L);
      case 78:
      case 110:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_1(2, 39, 18);
         return jjMoveStringLiteralDfa3_1(active0, 0x800808011000L, active1, 0x104L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_1(active0, 0x1000100600000004L, active1, 0L);
      case 80:
      case 112:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_1(2, 46, 18);
         return jjMoveStringLiteralDfa3_1(active0, 0x20000000000L, active1, 0L);
      case 82:
      case 114:
         if ((active0 & 0x20L) != 0L)
         {
            jjmatchedKind = 5;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_1(2, 53, 18);
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_1(2, 69, 18);
         return jjMoveStringLiteralDfa3_1(active0, 0x3000000000L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_1(active0, 0x200200001000080L, active1, 0L);
      case 84:
      case 116:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_1(2, 31, 18);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_1(2, 68, 18);
         return jjMoveStringLiteralDfa3_1(active0, 0x80000000000002L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_1(active0, 0x200000L, active1, 0L);
      case 86:
      case 118:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_1(2, 22, 18);
         else if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_1(2, 23, 18);
         return jjMoveStringLiteralDfa3_1(active0, 0x40000000000L, active1, 0L);
      case 87:
      case 119:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_1(2, 28, 18);
         break;
      case 88:
      case 120:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_1(2, 13, 18);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_1(2, 38, 18);
         return jjMoveStringLiteralDfa3_1(active0, 0x400L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_1(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_1(active0, 0x4080000000004000L, active1, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa4_1(active0, 0x8000108L, active1, 0L);
      case 67:
      case 99:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 56, 18);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 63, 18);
         return jjMoveStringLiteralDfa4_1(active0, 0x100000000L, active1, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa4_1(active0, 0x10000L, active1, 0L);
      case 69:
      case 101:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_1(3, 6, 18);
         else if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_1(3, 21, 18);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 41, 18);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 42, 18);
         else if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_1(3, 67, 18);
         return jjMoveStringLiteralDfa4_1(active0, 0x1001000000000L, active1, 0x101L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_1(active0, 0x800000200000010L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa4_1(active0, 0x80000000000L, active1, 0L);
      case 77:
      case 109:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_1(3, 65, 18);
         return jjMoveStringLiteralDfa4_1(active0, 0x1000002000000000L, active1, 0L);
      case 78:
      case 110:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 44, 18);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 52, 18);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa4_1(active0, 0x20000004L, active1, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa4_1(active0, 0x800L, active1, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa4_1(active0, 0x200000000000000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa4_1(active0, 0x40010000080000L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_1(active0, 0x400100000L, active1, 0x40L);
      case 84:
      case 116:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_1(3, 7, 18);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_1(3, 25, 18);
         return jjMoveStringLiteralDfa4_1(active0, 0x200801000402L, active1, 0L);
      case 85:
      case 117:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_1(3, 66, 18);
         return jjMoveStringLiteralDfa4_1(active0, 0x1000L, active1, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa4_1(active0, 0x800000000000L, active1, 0L);
      case 88:
      case 120:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_1(3, 15, 18);
         break;
      default :
         break;
   }
   return jjStartNfa_1(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_1(4, 24, 18);
         return jjMoveStringLiteralDfa5_1(active0, 0x802008000400L, active1, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa5_1(active0, 0x80000000000000L, active1, 0L);
      case 67:
      case 99:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_1(4, 19, 18);
         return jjMoveStringLiteralDfa5_1(active0, 0x1001200000000L, active1, 0L);
      case 69:
      case 101:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_1(4, 20, 18);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_1(4, 34, 18);
         return jjMoveStringLiteralDfa5_1(active0, 0x200800000100L, active1, 0x40L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa5_1(active0, 0x800L, active1, 0L);
      case 75:
      case 107:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_1(4, 32, 18);
         break;
      case 76:
      case 108:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 43, 18);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 57, 18);
         else if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_1(4, 64, 18);
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_1(4, 72, 18);
         break;
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_1(active0, 0x10L, active1, 0L);
      case 78:
      case 110:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 59, 18);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_1(active0, 0x1000aL, active1, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa5_1(active0, 0x1000000000000000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa5_1(active0, 0x20004000L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa5_1(active0, 0x4L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_1(active0, 0x4000000000000000L, active1, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa5_1(active0, 0x10000000000L, active1, 0L);
      case 88:
      case 120:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_1(4, 12, 18);
         break;
      case 89:
      case 121:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 54, 18);
         break;
      default :
         break;
   }
   return jjStartNfa_1(3, active0, active1);
}
private int jjMoveStringLiteralDfa5_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_1(active0, 0x80000000000010L, active1, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa6_1(active0, 0x8L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa6_1(active0, 0x200000004L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_1(active0, 0x4800L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa6_1(active0, 0x4000000000000000L, active1, 0L);
      case 77:
      case 109:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 45, 18);
         return jjMoveStringLiteralDfa6_1(active0, 0x20000000L, active1, 0L);
      case 78:
      case 110:
         if ((active0 & 0x2L) != 0L)
            return jjStartNfaWithStates_1(5, 1, 18);
         return jjMoveStringLiteralDfa6_1(active0, 0x808000000L, active1, 0L);
      case 82:
      case 114:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_1(5, 8, 18);
         return jjMoveStringLiteralDfa6_1(active0, 0x10000000400L, active1, 0L);
      case 83:
      case 115:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 47, 18);
         break;
      case 84:
      case 116:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 37, 18);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 60, 18);
         else if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_1(5, 70, 18);
         return jjMoveStringLiteralDfa6_1(active0, 0x1001000000000L, active1, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa6_1(active0, 0x10000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_1(4, active0, active1);
}
private int jjMoveStringLiteralDfa6_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_1(active0, 0x20000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa7_1(active0, 0x400L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_1(active0, 0x1011000000000L);
      case 75:
      case 107:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_1(6, 27, 18);
         break;
      case 76:
      case 108:
         if ((active0 & 0x10L) != 0L)
            return jjStartNfaWithStates_1(6, 4, 18);
         return jjMoveStringLiteralDfa7_1(active0, 0x800L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_1(active0, 0x8L);
      case 82:
      case 114:
         if ((active0 & 0x4L) != 0L)
            return jjStartNfaWithStates_1(6, 2, 18);
         break;
      case 83:
      case 115:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_1(6, 14, 18);
         else if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_1(6, 16, 18);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_1(6, 33, 18);
         return jjMoveStringLiteralDfa7_1(active0, 0x80000000000000L);
      case 84:
      case 116:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_1(6, 35, 18);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_1(6, 62, 18);
         break;
      default :
         break;
   }
   return jjStartNfa_1(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_1(7, 10, 18);
         break;
      case 69:
      case 101:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_1(7, 11, 18);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_1(7, 55, 18);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_1(active0, 0x1001000000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa8_1(active0, 0x20000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa8_1(active0, 0x10000000000L);
      case 88:
      case 120:
         if ((active0 & 0x8L) != 0L)
            return jjStartNfaWithStates_1(7, 3, 18);
         break;
      default :
         break;
   }
   return jjStartNfa_1(6, active0, 0L);
}
private int jjMoveStringLiteralDfa8_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_1(8, 40, 18);
         break;
      case 75:
      case 107:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_1(8, 29, 18);
         break;
      case 78:
      case 110:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_1(8, 36, 18);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_1(8, 48, 18);
         break;
      default :
         break;
   }
   return jjStartNfa_1(7, active0, 0L);
}
private int jjStartNfaWithStates_1(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_1(state, pos + 1);
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 72;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 8:
               case 18:
                  if ((0x3ff400000000000L & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  jjCheckNAdd(18);
                  break;
               case 35:
                  if ((0x3ff400000000000L & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  jjCheckNAdd(18);
                  break;
               case 2:
                  if ((0x3ff400000000000L & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  jjCheckNAdd(18);
                  break;
               case 32:
                  if ((0x3ff400000000000L & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  jjCheckNAdd(18);
                  break;
               case 31:
                  if ((0x3ff400000000000L & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  jjCheckNAdd(18);
                  break;
               case 30:
                  if ((0x3ff400000000000L & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  jjCheckNAdd(18);
                  break;
               case 3:
                  if ((0x3ff400000000000L & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  jjCheckNAdd(18);
                  break;
               case 41:
                  if ((0x3ff400000000000L & l) != 0L)
                  {
                     if (kind > 78)
                        kind = 78;
                     jjCheckNAdd(18);
                  }
                  if (curChar == 56)
                     jjstateSet[jjnewStateCnt++] = 44;
                  if (curChar == 56)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 75)
                        kind = 75;
                     jjCheckNAddStates(0, 4);
                  }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 79)
                        kind = 79;
                  }
                  else if ((0x100000200L & l) != 0L)
                  {
                     if (kind > 81)
                        kind = 81;
                     jjCheckNAdd(19);
                  }
                  else if (curChar == 35)
                     jjCheckNAddTwoStates(66, 67);
                  else if (curChar == 36)
                     jjAddStates(7, 11);
                  else if (curChar == 45)
                     jjCheckNAddStates(12, 15);
                  else if (curChar == 46)
                     jjCheckNAdd(16);
                  else if (curChar == 34)
                     jjCheckNAddStates(16, 18);
                  if (curChar == 13)
                     jjAddStates(27, 28);
                  break;
               case 5:
                  if (curChar == 52 && kind > 18)
                     kind = 18;
                  break;
               case 6:
               case 42:
                  if (curChar == 54)
                     jjCheckNAdd(5);
                  break;
               case 10:
               case 12:
                  if (curChar == 34)
                     jjCheckNAddStates(16, 18);
                  break;
               case 11:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(16, 18);
                  break;
               case 13:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 34 && kind > 74)
                     kind = 74;
                  break;
               case 15:
                  if (curChar == 46)
                     jjCheckNAdd(16);
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAdd(16);
                  break;
               case 19:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  jjCheckNAdd(19);
                  break;
               case 40:
                  if (curChar == 54 && kind > 17)
                     kind = 17;
                  break;
               case 44:
                  if (curChar == 54)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 45:
                  if (curChar == 56)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 46:
                  if (curChar == 45)
                     jjCheckNAddStates(12, 15);
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 75)
                     kind = 75;
                  jjCheckNAdd(47);
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(48, 49);
                  break;
               case 49:
                  if (curChar == 46)
                     jjCheckNAdd(50);
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAdd(50);
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(51, 52);
                  break;
               case 52:
                  if (curChar == 46 && kind > 76)
                     kind = 76;
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 75)
                     kind = 75;
                  jjCheckNAddStates(0, 4);
                  break;
               case 54:
                  if (curChar == 36)
                     jjAddStates(7, 11);
                  break;
               case 56:
                  if ((0x3ff400000000000L & l) == 0L)
                     break;
                  if (kind > 75)
                     kind = 75;
                  jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 58:
                  if ((0x3ff400000000000L & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 60:
                  if ((0x3ff400000000000L & l) != 0L)
                     jjCheckNAddTwoStates(60, 49);
                  break;
               case 62:
                  if ((0x3ff400000000000L & l) != 0L)
                     jjCheckNAddTwoStates(62, 52);
                  break;
               case 64:
                  if ((0x3ff400000000000L & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 65:
                  if (curChar == 35)
                     jjCheckNAddTwoStates(66, 67);
                  break;
               case 66:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 79)
                     kind = 79;
                  jjCheckNAdd(66);
                  break;
               case 67:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 80)
                     kind = 80;
                  jjCheckNAdd(67);
                  break;
               case 68:
                  if ((0x2400L & l) != 0L && kind > 79)
                     kind = 79;
                  break;
               case 69:
                  if (curChar == 13)
                     jjAddStates(27, 28);
                  break;
               case 70:
                  if (curChar == 10 && kind > 79)
                     kind = 79;
                  break;
               case 71:
                  if (curChar == 10 && kind > 92)
                     kind = 92;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 8:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 78)
                        kind = 78;
                     jjCheckNAdd(18);
                  }
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 35:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 78)
                        kind = 78;
                     jjCheckNAdd(18);
                  }
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 2:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 78)
                        kind = 78;
                     jjCheckNAdd(18);
                  }
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 32:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 78)
                        kind = 78;
                     jjCheckNAdd(18);
                  }
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 37;
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 31:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 78)
                        kind = 78;
                     jjCheckNAdd(18);
                  }
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 36;
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 30:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 78)
                        kind = 78;
                     jjCheckNAdd(18);
                  }
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 35;
                  if ((0x10000000100000L & l) != 0L)
                  {
                     if (kind > 9)
                        kind = 9;
                  }
                  break;
               case 3:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 78)
                        kind = 78;
                     jjCheckNAdd(18);
                  }
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 41:
               case 18:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  jjCheckNAdd(18);
                  break;
               case 4:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 78)
                        kind = 78;
                     jjCheckNAdd(18);
                  }
                  if ((0x100000001000000L & l) != 0L)
                     jjAddStates(21, 22);
                  else if ((0x10000000100000L & l) != 0L)
                     jjAddStates(23, 24);
                  else if ((0x10000000100L & l) != 0L)
                     jjAddStates(25, 26);
                  else if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 8;
                  else if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 0:
                  if ((0x100000001000L & l) != 0L && kind > 17)
                     kind = 17;
                  break;
               case 1:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 7:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 9:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 11:
                  jjAddStates(16, 18);
                  break;
               case 17:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  jjCheckNAdd(18);
                  break;
               case 20:
                  if ((0x10000000100L & l) != 0L)
                     jjAddStates(25, 26);
                  break;
               case 21:
                  if ((0x100000001000L & l) != 0L && kind > 58)
                     kind = 58;
                  break;
               case 22:
                  if ((0x2000000020000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if ((0x400000004L & l) != 0L && kind > 58)
                     kind = 58;
                  break;
               case 25:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if ((0x2000000020000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if ((0x10000000100000L & l) != 0L)
                     jjAddStates(23, 24);
                  break;
               case 33:
                  if ((0x100000001000000L & l) != 0L && kind > 9)
                     kind = 9;
                  break;
               case 34:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 36:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if ((0x100000001000000L & l) != 0L)
                     jjAddStates(21, 22);
                  break;
               case 43:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 55:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 75)
                     kind = 75;
                  jjCheckNAdd(56);
                  break;
               case 56:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 75)
                     kind = 75;
                  jjCheckNAdd(56);
                  break;
               case 57:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAdd(58);
                  break;
               case 58:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAdd(58);
                  break;
               case 59:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(60, 49);
                  break;
               case 60:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(60, 49);
                  break;
               case 61:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(62, 52);
                  break;
               case 62:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(62, 52);
                  break;
               case 63:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  jjCheckNAdd(64);
                  break;
               case 64:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  jjCheckNAdd(64);
                  break;
               case 66:
                  if (kind > 79)
                     kind = 79;
                  jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 67:
                  if (kind > 80)
                     kind = 80;
                  jjstateSet[jjnewStateCnt++] = 67;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 11:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(16, 18);
                  break;
               case 66:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 79)
                     kind = 79;
                  jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 67:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 80)
                     kind = 80;
                  jjstateSet[jjnewStateCnt++] = 67;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 72 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   47, 48, 49, 51, 52, 73, 76, 55, 57, 59, 61, 63, 47, 15, 48, 51, 
   11, 13, 14, 69, 70, 41, 45, 32, 38, 23, 28, 70, 71, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "DATA",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
   1, 1, 1, 1, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffffffffL, 0x2ffffL, 
};
static final long[] jjtoSkip = {
   0x0L, 0x7c0000L, 
};
static final long[] jjtoMore = {
   0x0L, 0x10010000L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[78];
private final int[] jjstateSet = new int[156];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public PCDTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public PCDTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 78; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        jjimageLen += jjmatchedPos + 1;
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 82 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                   indent = 0;
         break;
      case 83 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                   indent = 0;
         break;
      case 85 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                   indent++;
         break;
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 79 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                    indent = 0;
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
